<?php

namespace Booking\BookingBundle\Entity;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Orx;

/**
 * CasaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CasaRepository extends EntityRepository
{
    protected $columns = array('nombre','direccion','telefono','categoria','cantidadHab','clima','banno','disponible','observacion');
    //protected $columns = array('nombre','direccion','telefono');

    public function queryEntity($options = array())
    {
        $columns = &$this->columns;

        $em = $this->_em;
        $qb = $em->getRepository('BookingBundle:Casa')
            ->createQueryBuilder('a')
            ->distinct(true)
            ->select('a');

        if (array_key_exists('sSearch',$options)) {
            if ($options['sSearch'] != '') {
                $qb->andWhere(new Orx(

                /**
                 * @return array
                 */
                   call_user_func( function() use ($columns,$qb,$options){

                       $aLike = array();

                       foreach ($columns as $col) {

                           $aLike[] = $qb->expr()->like('a.'.$col, '\'%' . $options['sSearch'] . '%\'');
                       }

                       return $aLike;
                   })
                
                ));
            }
        }

        if ( isset( $options['iDisplayStart'] ) && $options['iDisplayLength'] != '-1' ){
            $qb->setFirstResult( (int)$options['iDisplayStart'] )
                ->setMaxResults( (int)$options['iDisplayLength'] );
        }


        if (array_key_exists('iDisplayLength',$options)) {
            if ($options['iDisplayLength']!='') {
                $qb->setMaxResults($options['iDisplayLength']);
            }
        }

        $result = $qb->getQuery()->useResultCache(true, 3600)->getResult();
        $dataExport = array();

        foreach ($result as $r) {
            /**
             * @var Casa $r
             * */

            $dataHouse = $r->toArray();
            $dataHouse[4]=$this->isAvailable($r);
            array_push($dataExport, $dataHouse);
        }





        return $dataExport;

    }

    public function getFilteredCount(array $get)
    {
        /* DB table to use */
        $tableObjectName = 'BookingBundle:Casa';

        $cb = $this->getEntityManager()
            ->getRepository($tableObjectName)
            ->createQueryBuilder('a')
            ->select("count(a.id)");

        /*
        * Filtering
        * NOTE this does not match the built-in DataTables filtering which does it
        * word by word on any field. It's possible to do here, but concerned about efficiency
        * on very large tables, and MySQL's regex functionality is very limited
        */
        if ( isset($get['sSearch']) && $get['sSearch'] != '' ){
            $aLike = array();
            for ( $i=0 ; $i<count($this->columns) ; $i++ ){
                if ( isset($get['bSearchable_'.$i]) && $get['bSearchable_'.$i] == "true" ){
                    $aLike[] = $cb->expr()->like('a.'.$this->columns[$i], '\'%'. $get['sSearch'] .'%\'');
                }
            }
            if(count($aLike) > 0) $cb->andWhere(new Orx($aLike));
            else unset($aLike);
        }

        /*
         * SQL queries
         * Get data to display
         */
        $query = $cb->getQuery();
        $aResultTotal = $query->getResult();
        return $aResultTotal[0][1];
    }

    /**
     * Checks if a house is available
     * @param Casa $casa
     * @return bool
     */
    public function isAvailable(Casa $casa){
        $today = new  \DateTime();
        /**
         * @var EntityManager $em
         */
        $em = $this->_em;
        $reservadas = $em->getRepository('BookingBundle:Reservacion')
            ->createQueryBuilder('r')
            ->where('r.checkin >= :checkin')
            ->orWhere('r.checkout<= :checkout')
            ->setParameters(
                array(
                    'checkout' => $today->format('Y-m-d'),
                    'checkin' => $today->format('Y-m-d')
                )
            )
            ->getQuery()
            ->getResult();
        $is = array_filter($reservadas,function($value)use($casa){
            /**
             * @var Reservacion $value
             */
            if ($value->getCasa()->getId() ==$casa->getId()) {
                return $value;
            }
        });

        return count($is)==0;
    }
}
